// Copyright 2019 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "mesh/v1alpha1/proxy.proto";
import "networking/v1alpha3/destination_rule.proto";

// $title: Service Mesh
// $description: Configuration affecting the service mesh as a whole.
// $location: https://istio.io/docs/reference/config/istio.mesh.v1alpha2.html

// Configuration affecting the service mesh as a whole.
package istio.mesh.v1alpha2;

option go_package="istio.io/api/mesh/v1alpha2";

// MeshConfig defines a top level configuration for all Istio control plane components.
message MeshConfig {
  // Selection and configuration of core Istio features.
  TrafficManagementFeatureSpec traffic_management = 10;
  PolicyFeatureSpec policy = 11;
  TelemetryFeatureSpec telemetry = 12;
  SecurityFeatureSpec security = 13;
  ConfigManagementFeatureSpec config_management = 14;
  AutoInjectionFeatureSpec auto_injection = 15;
  GatewayFeatureSpec gateways = 16;

  // Default namespace if feature or component namespaces are not set.
  // The namespace to treat as the administrative root namespace for
  // Istio configuration. When processing a leaf namespace Istio will search for
  // declarations in that namespace first and if none are found it will
  // search in the root namespace. Any matching declaration found in the root
  // namespace is processed as if it were declared in the leaf namespace.
  //
  // The precise semantics of this processing are documented on each resource
  // type.
  string default_namespace = 30;

  // Installation time parameters, used in Helm and operator.
  InstallSpec install = 60;
}

// Configuration options for traffic management.
message TrafficManagementFeatureSpec {
  // Address of the server that will be used by the proxies for policy report
  // calls.
  string mixer_report_server = 10;

  // Enable session affinity for Envoy Mixer reports so that calls from a proxy will
  // always target the same Mixer instance.
  bool sidecar_to_telemetry_session_affinity = 11;

  // Port on which Envoy should listen for incoming connections from
  // other services.
  int32 proxy_listen_port = 12;

  // Port on which Envoy should listen for HTTP PROXY requests if set.
  int32 proxy_http_port = 13;

  // Connection timeout used by Envoy. (MUST BE >=1ms)
  google.protobuf.Duration connect_timeout = 14;

  // Automatic protocol detection uses a set of heuristics to
  // determine whether the connection is using TLS or not (on the
  // server side), as well as the application protocol being used
  // (e.g., http vs tcp). These heuristics rely on the client sending
  // the first bits of data. For server first protocols like MySQL,
  // MongoDB, etc., Envoy will timeout on the protocol detection after
  // the specified period, defaulting to non mTLS plain TCP
  // traffic. Set this field to tweak the period that Envoy will wait
  // for the client to send the first bits of data. (MUST BE >=1ms)
  google.protobuf.Duration protocol_detection_timeout = 15;

  // If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
  istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive tcp_keepalive = 16;

  // Unix Domain Socket through which Envoy communicates with NodeAgent SDS to get key/cert for mTLS.
  // Use secret-mount files instead of SDS if set to empty.
  string sds_uds_path = 18;

  // ConfigSource describes a source of configuration data for networking
  // rules, and other Istio configuration artifacts. Multiple data sources
  // can be configured for a single control plane.
  repeated ConfigSource config_sources = 19;

  // Configures DNS refresh rate for Envoy clusters of type STRICT_DNS
  google.protobuf.Duration dns_refresh_rate = 20;

  // Default Policy for upgrading http1.1 connections to http2.
  enum H2UpgradePolicy {
    // Do not upgrade connections to http2.
    DO_NOT_UPGRADE = 0;
    // Upgrade the connections to http2.
    UPGRADE = 1;
  }
  // Specify if http1.1 connections should be upgraded to http2 by default.
  // if sidecar is installed on all pods in the mesh, then this should be set to UPGRADE.
  // If one or more services or namespaces do not have sidecar(s), then this should be set to DO_NOT_UPGRADE.
  // It can be enabled by destination using the destinationRule.trafficPolicy.connectionPool.http.h2UpgradePolicy override.
  H2UpgradePolicy h2_upgrade_policy = 21;

  // Locality based load balancing distribution or failover settings.
  LocalityLoadBalancerSetting locality_lb_setting = 22;

  // Component specific config.
  message Components {
    // Namespace that all traffic management components are installed into.
    string namespace = 1;

    PilotComponentSpec pilot = 20;
    ProxyComponentSpec proxy = 21;
  }
  Components components = 50;
}

// Configuration options for the policy feature.
message PolicyFeatureSpec {
  // Disable policy checks by the Mixer service. Default
  // is false, i.e. Mixer policy check is enabled by default.
  bool disable_policy_checks = 11;

  // Allow all traffic in cases when the Mixer policy service cannot be reached.
  // Default is false which means the traffic is denied when the client is unable
  // to connect to Mixer.
  bool policy_check_fail_open = 12;

  message OutboundTrafficPolicy {
    enum Mode {
      // outbound traffic will be restricted to services defined in the
      // service registry as well as those defined through ServiceEntries
      REGISTRY_ONLY = 0;
      // outbound traffic to unknown destinations will be allowed, in case
      // there are no services or ServiceEntries for the destination port
      ALLOW_ANY = 1;

      reserved 2;
      reserved "VIRTUAL_SERVICE_ONLY";
    }
    Mode mode = 1;
  }

  // Set the default behavior of the sidecar for handling outbound traffic
  // from the application.  If your application uses one or more external
  // services that are not known apriori, setting the policy to ALLOW_ANY
  // will cause the sidecars to route any unknown traffic originating from
  // the application to its requested destination.  Users are strongly
  // encouraged to use ServiceEntries to explicitly declare any external
  // dependencies, instead of using allow_any, so that traffic to these
  // services can be monitored.
  OutboundTrafficPolicy outbound_traffic_policy = 13;

  // Enables client side policy checks.
  bool enable_client_side_policy_check = 14;

  // The default value for the ServiceEntry.export_to field and services
  // imported through container registry integrations, e.g. this applies to
  // Kubernetes Service resources. The value is a list of namespace names and
  // reserved namespace aliases. The allowed namespace aliases are:
  //
  // * - All Namespaces
  // . - Current Namespace
  // ~ - No Namespace
  //
  // If not set the system will use "*" as the default value which implies that
  // services are exported to all namespaces.
  //
  // 'All namespaces' is a reasonable default for implementations that don't
  // need to restrict access or visibility of services across namespace
  // boundaries. If that requirement is present it is generally good practice to
  // make the default 'Current namespace' so that services are only visible
  // within their own namespaces by default. Operators can then expand the
  // visibility of services to other namespaces as needed. Use of 'No Namespace'
  // is expected to be rare but can have utility for deployments where
  // dependency management needs to be precise even within the scope of a single
  // namespace.
  //
  // For further discussion see the reference documentation for ServiceEntry,
  // Sidecar, and Gateway.
  repeated string default_service_export_to = 15;

  // The default value for the VirtualService.export_to field. Has the same
  // syntax as 'default_service_export_to'.
  //
  // If not set the system will use "*" as the default value which implies that
  // virtual services are exported to all namespaces
  repeated string default_virtual_service_export_to = 16;

  // The default value for the DestinationRule.export_to field. Has the same
  // syntax as 'default_service_export_to'.
  //
  // If not set the system will use "*" as the default value which implies that
  // destination rules are exported to all namespaces
  repeated string default_destination_rule_export_to = 17;

  // Component specific config.
  message Components {
    // Namespace that all policy components are installed into.
    string namespace = 1;

    PolicyComponentSpec policy = 20;
  }

  Components components = 50;
}

// Configuration options for the telemetry feature.
message TelemetryFeatureSpec {
  // Address of the server that will be used by the proxies for policy
  // check calls. By using different names for mixerCheckServer and
  // mixerReportServer, it is possible to have one set of Mixer servers handle
  // policy check calls while another set of Mixer servers handle telemetry
  // calls.
  //
  // NOTE: Omitting mixerCheckServer while specifying mixerReportServer is
  // equivalent to setting disablePolicyChecks to true.
  string mixer_check_server = 10;

  // The flag to disable report batch.
  bool disable_report_batch = 13;

  // When disable_report_batch is false, this value specifies the maximum number
  // of requests that are batched in report. If left unspecified, the default value
  // of report_batch_max_entries == 0 will use the hardcoded defaults of
  // istio::mixerclient::ReportOptions.
  uint32 report_batch_max_entries = 14;

  // When disable_report_batch is false, this value specifies the maximum elapsed
  // time a batched report will be sent after a user request is processed. If left
  // unspecified, the default report_batch_max_time == 0 will use the hardcoded
  // defaults of istio::mixerclient::ReportOptions.
  google.protobuf.Duration report_batch_max_time = 15;

  // Name to be used while emitting statistics for inbound clusters.
  // By default, Istio emits statistics with the pattern inbound|<port>|<port-name>|<service-FQDN>.
  // For example inbound|7443|grpc-reviews|reviews.prod.svc.cluster.local. This can be used to override that pattern.
  //
  // A Pattern can be composed of various pre-defined variables. The following variables are supported.
  // %SERVICE% - Will be substituted with name of the service.
  // %SERVICE_FQDN% - Will be substituted with FQDN of the service.
  // %SERVICE_PORT% - Will be substituted with port of the service.
  // %SERVICE_PORT_NAME% - Will be substituted with port name of the service.
  //
  // Following are some examples of supported patterns for reviews.
  // %SERVICE_FQDN%_%SERVICE_PORT% will use reviews.prod.svc.cluster.local_7443 as the stats name.
  // %SERVICE% will use reviews.prod as the stats name.
  string inbound_cluster_stat_name = 16;

  // Name to be used while emitting statistics for outbound clusters.
  // By default, Istio emits statistics with the pattern outbound|<port>|<subsetname>|<service-FQDN>.
  // For example outbound|8080|v2|reviews.prod.svc.cluster.local. This can be used to override that pattern.
  //
  // A Pattern can be composed of various pre-defined variables. The following variables are supported.
  // %SERVICE% - Will be substituted with name of the service.
  // %SERVICE_FQDN% - Will be substituted with FQDN of the service.
  // %SERVICE_PORT% - Will be substituted with port of the service.
  // %SERVICE_PORT_NAME% - Will be substituted with port name of the service.
  // %SUBSET_NAME% - Will be substituted with subset.
  //
  // Following are some examples of supported patterns for reviews.
  // %SERVICE_FQDN%_%SERVICE_PORT% will use reviews.prod.svc.cluster.local_7443 as the stats name.
  // %SERVICE% will use reviews.prod as the stats name.
  string outbound_cluster_stat_name = 17;

  // Configuration for access logs.
  AccessLogConfig access_log_config = 18;

  // Component specific config.
  message Components {
    // Namespace that all telemetry components are installed into.
    string namespace = 1;

    TelemetryComponentSpec telemetry = 20;
  }

  Components components = 50;
}

// Configuration options for security feature.
message SecurityFeatureSpec {
  // This flag is used to enable mutual TLS automatically for service to service communication
  // within the mesh, default false.
  // If set to true, and a given service does not have a corresponding DestinationRule configured,
  // or its DestinationRule does not have TLSSettings specified, Istio configures client side
  // TLS configuration appropriately. More specifically,
  // If the upstream authentication policy is in STRICT mode, use Istio provisioned certificate
  // for mutual TLS to connect to upstream.
  // If upstream service is in plain text mode, use plain text.
  // If the upstream authentication policy is in PERMISSIVE mode, Istio configures clients to use
  // mutual TLS when server sides are capable of accepting mutual TLS traffic.
  // If service DestinationRule exists and has TLSSettings specified, that is always used instead.
  google.protobuf.BoolValue enable_auto_mtls = 10;

  // $hide_from_docs
  // This flag is used by secret discovery service(SDS).
  // If set to true ([prerequisite](https://kubernetes.io/docs/concepts/storage/volumes/#projected)), Istio will inject volumes mount
  // for Kubernetes service account trustworthy JWT(which is available with Kubernetes 1.12 or higher), so that the Kubernetes API server
  // mounts Kubernetes service account trustworthy JWT to the Envoy container, which will be used to request key/cert eventually.
  // This isn't supported for non-Kubernetes cases.
  bool enable_sds_token_mount = 11;

  // $hide_from_docs
  // This flag is used by secret discovery service(SDS).
  // If set to true, Envoy will fetch a normal Kubernetes service account JWT from '/var/run/secrets/kubernetes.io/serviceaccount/token'
  // (https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#accessing-the-api-from-a-pod)
  // and pass to sds server, which will be used to request key/cert eventually.
  // If both enable_sds_token_mount and sds_use_k8s_sa_jwt are set to true, enable_sds_token_mount(trustworthy jwt) takes precedence.
  // This isn't supported for non-k8s case.
  bool sds_use_k8s_sa_jwt = 12;

  // The trust domain corresponds to the trust root of a system.
  // Refer to [SPIFFE-ID](https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain)
  // Fallback to old identity format(without trust domain) if not set.
  string trust_domain = 13;

  message Components {
    // Namespace that security components are installed into.
    string namespace = 1;

    CitadelComponentSpec citadel = 20;
    CertManagerComponentSpec cert_manager = 21;
    NodeAgentComponentSpec node_agent = 22;
  }

  Components components = 50;
}

// Configuration options for configuration management feature.
message ConfigManagementFeatureSpec {
  message Components {
    // Namespace that security components are installed into.
    string namespace = 1;

    GalleyComponentSpec galley = 20;
  }

  Components components = 50;
}

// Configuration options for auto injection feature.
message AutoInjectionFeatureSpec {
  message Components {
    // Namespace that auto injections components are installed into.
    string namespace = 1;

    SidecarInjectorComponentSpec injector = 20;
  }

  Components components = 50;
}

// Configuration options for gateway feature.
message GatewayFeatureSpec {
  // Class of ingress resources to be processed by Istio ingress
  // controller. This corresponds to the value of
  // "kubernetes.io/ingress.class" annotation.
  string ingress_class = 10;

  // Name of theKubernetes service used for the istio ingress controller.
  string ingress_service = 11;

  enum IngressControllerMode {
    // Disables Istio ingress controller.
    OFF = 0;

    // Istio ingress controller will act on ingress resources that do not
    // contain any annotation or whose annotations match the value
    // specified in the ingress_class parameter described earlier. Use this
    // mode if Istio ingress controller will be the default ingress
    // controller for the entireKubernetes cluster.
    DEFAULT = 1;

    // Istio ingress controller will only act on ingress resources whose
    // annotations match the value specified in the ingress_class parameter
    // described earlier. Use this mode if Istio ingress controller will be
    // a secondary ingress controller (e.g., in addition to a
    // cloud-provided ingress controller).
    STRICT = 2;
  }

  // Defines whether to use Istio ingress controller for annotated or all ingress resources.
  IngressControllerMode ingress_controller_mode = 12;

  message Components {
    // Namespace that auto injections components are installed into.
    string namespace = 1;

    // Ingress/egress gateway configuration.
    IngressGatewayComponentSpec ingress_gateway = 31;
    EgressGatewayComponentSpec egress_gateway = 32;
  }

  Components components = 50;
}

// Configuration for proxy access logs.
message AccessLogConfig {
  // File address for the proxy access log (e.g. /dev/stdout).
  // Empty value disables access logging.
  string access_log_file = 1;

  // Format for the proxy access log
  // Empty value results in proxy's default access log format
  string access_log_format = 2;

  enum AccessLogEncoding {
    TEXT = 0;
    JSON = 1;
  }

  // Encoding for the proxy access log (text or json).
  // Default value is text.
  AccessLogEncoding access_log_encoding = 3;
}

// Options used during installation and for backward compatibility with Helm values and operator API.
message InstallSpec {
  // Path or name for the profile e.g.
  //     - minimal (looks in compiled-in profiles dir for a file called minimal.yaml)
  //     - /tmp/istio/install/values/custom/custom-install.yaml (local file path)
  // default profile is used if this field is unset.
  string profile = 10;
  // Path for the install package. e.g.
  //     - /tmp/istio-installer/nightly (local file path)
  string install_package_path = 11;
  // Root for docker image paths e.g. docker.io/istio-release.
  // Releases are published to docker hub under 'istio' project.
  // Daily builds from prow are on gcr.io, and nightly builds from circle on docker.io/istionightly
  string hub = 12;
  // Version tag for docker images e.g. 1.0.6
  string tag = 13;

  // Overrides for default global values.yaml.
  TypeMapStringInterface values = 50;
  // Unvalidated overrides for default global values.yaml.
  TypeMapStringInterface unvalidatedValues = 51;
}

// Configuration common to all components.

// Selects whether this component is installed.
// google.protobuf.BoolValue enabled = 1;

// Namespace that all resources for this component are installed into. Overrides the parent feature namespace and
// IstioControlPlaneSpec.DefaultNamespace.
// string namespace = 2;

// Kubernetes resource spec.
// KubernetesResourcesSpec k8s = 80;

// Configuration options for the pilot component.
message PilotComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the proxy.
message ProxyComponentSpec {
  string namespace = 2;

  // Default proxy config used by the proxy injection mechanism operating in the mesh
  // (e.g. Kubernetes admission controller)
  // In case of Kubernetes, the proxy config is applied once during the injection process,
  // and remain constant for the duration of the pod. The rest of the mesh config can be changed
  // at runtime and config gets distributed dynamically.
  ProxyConfig default_config = 10;

  // This flag enables Envoy's gRPC Access Log Service.
  // See [Access Log Service](https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto)
  // for details about Envoy's gRPC Access Log Service API.
  bool enable_envoy_access_log_service = 40;

  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the sidecar injector component.
message SidecarInjectorComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the policy enforcement component.
message PolicyComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the telemetry component.
message TelemetryComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for Citadel component.
message CitadelComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for certificate manager component.
message CertManagerComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for node agent component.
message NodeAgentComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for node agent component.
message GalleyComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for ingress gateways.
message IngressGatewayComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Configuration options for egress gateways.
message EgressGatewayComponentSpec {
  google.protobuf.BoolValue enabled = 1;
  string namespace = 2;
  KubernetesResourcesSpec k8s = 80;
}

// Resource describes the source of configuration
enum Resource {
  // Set to only receive service entries that are generated by the platform.
  // These auto generated service entries are combination of services and endpoints
  // that are generated by a specific platform e.g. k8
  SERVICE_REGISTRY = 0;
}

// ConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
message ConfigSource {
  // Address of the server implementing the Istio Mesh Configuration
  // protocol (MCP). Can be IP address or a fully qualified DNS name.
  // Use fs:/// to specify a file-based backend with absolute path to the directory.
  string address = 1;
  // Use the tls_settings to specify the tls mode to use. If the MCP server
  // uses Istio mutual TLS and shares the root CA with Pilot, specify the TLS
  // mode as ISTIO_MUTUAL.
  istio.networking.v1alpha3.TLSSettings tls_settings = 2;
  // Describes the source of configuration, if nothing is specified default is MCP
  repeated Resource subscribed_resources = 3;
}

// Locality-weighted load balancing allows administrators to control the
// distribution of traffic to endpoints based on the localities of where the
// traffic originates and where it will terminate. These localities are
// specified using arbitrary labels that designate a hierarchy of localities in
// {region}/{zone}/{sub-zone} form. For additional detail refer to
// [Locality Weight](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight)
// The following example shows how to setup locality weights mesh-wide.
//
// Given a mesh with workloads and their service deployed to "us-west/zone1/*"
// and "us-west/zone2/*". This example specifies that when traffic accessing a
// service originates from workloads in "us-west/zone1/*", 80% of the traffic
// will be sent to endpoints in "us-west/zone1/*", i.e the same zone, and the
// remaining 20% will go to endpoints in "us-west/zone2/*". This setup is
// intended to favor routing traffic to endpoints in the same locality.
// A similar setting is specified for traffic originating in "us-west/zone2/*".
//
// ```yaml
//   distribute:
//     - from: us-west/zone1/*
//       to:
//         "us-west/zone1/*": 80
//         "us-west/zone2/*": 20
//     - from: us-west/zone2/*
//       to:
//         "us-west/zone1/*": 20
//         "us-west/zone2/*": 80
// ```
//
// If the goal of the operator is not to distribute load across zones and
// regions but rather to restrict the regionality of failover to meet other
// operational requirements an operator can set a 'failover' policy instead of
// a 'distribute' policy.
//
// The following example sets up a locality failover policy for regions.
// Assume a service resides in zones within us-east, us-west & eu-west
// this example specifies that when endpoints within us-east become unhealthy
// traffic should failover to endpoints in any zone or sub-zone within eu-west
// and similarly us-west should failover to us-east.
//
// ```yaml
//  failover:
//    - from: us-east
//      to: eu-west
//    - from: us-west
//      to: us-east
// ```
// Locality load balancing settings.
message LocalityLoadBalancerSetting{
  // Describes how traffic originating in the 'from' zone or sub-zone is
  // distributed over a set of 'to' zones. Syntax for specifying a zone is
  // {region}/{zone}/{sub-zone} and terminal wildcards are allowed on any
  // segment of the specification. Examples:
  // * - matches all localities
  // us-west/* - all zones and sub-zones within the us-west region
  // us-west/zone-1/* - all sub-zones within us-west/zone-1
  message Distribute{
    // Originating locality, '/' separated, e.g. 'region/zone/sub_zone'.
    string from = 1;

    // Map of upstream localities to traffic distribution weights. The sum of
    // all weights should be == 100. Any locality not assigned a weight will
    // receive no traffic.
    map<string, uint32> to = 2;
  };

  // Specify the traffic failover policy across regions. Since zone and sub-zone
  // failover is supported by default this only needs to be specified for
  // regions when the operator needs to constrain traffic failover so that
  // the default behavior of failing over to any endpoint globally does not
  // apply. This is useful when failing over traffic across regions would not
  // improve service health or may need to be restricted for other reasons
  // like regulatory controls.
  message Failover{
    // Originating region.
    string from = 1;

    // Destination region the traffic will fail over to when endpoints in
    // the 'from' region becomes unhealthy.
    string to = 2;
  };

  // Optional: only one of distribute or failover can be set.
  // Explicitly specify loadbalancing weight across different zones and geographical locations.
  // Refer to [Locality weighted load balancing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight)
  // If empty, the locality weight is set according to the endpoints number within it.
  repeated Distribute distribute = 1;

  // Optional: only failover or distribute can be set.
  // Explicitly specify the region traffic will land on when endpoints in local region becomes unhealthy.
  // Should be used together with OutlierDetection to detect unhealthy endpoints.
  // Note: if no OutlierDetection specified, this will not take effect.
  repeated Failover failover = 2;
}
