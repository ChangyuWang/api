// Copyright 2010 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "core/v1alpha1/port.proto";
import "core/v1alpha1/selector.proto";

package istio.core.v1alpha1;

option go_package = "istio.io/api/core/v1alpha1";

// Configuration for a Workload.
message Workload {
    // Criteria used to select the specific set of pods/VMs on which this
    // sidecar configuration should be applied. If omitted, the sidecar
    // configuration will be applied to all workload instances in the same namespace.
    Selector select = 1;

    Network network = 2;

    Telemetry telemetry = 3;

    Security security = 4;
}

// Network configuration for a Workload.
message Network {
    repeated Ingress ingress = 2;
    repeated Egress egress = 3;
}

message Ingress {
    // REQUIRED. The port associated with the listener.
    Port port = 1;

    // The ip to which the listener should be bound. Must be in the
    // format `x.x.x.x`. Unix domain socket addresses are not allowed in
    // the bind field for ingress listeners. If omitted, Istio will
    // automatically configure the defaults based on imported services
    // and the workload instances to which this configuration is applied
    // to.
    string bind = 2;

    // The captureMode option dictates how traffic to the listener is
    // expected to be captured (or not).
    CaptureMode capture_mode = 3;

    // REQUIRED: The loopback IP endpoint or Unix domain socket to which
    // traffic should be forwarded to. This configuration can be used to
    // redirect traffic arriving at the bind IP:Port on the sidecar to a localhost:port
    // or Unix domain socket where the application workload instance is listening for
    // connections. Format should be 127.0.0.1:PORT or `unix:///path/to/socket`
    string default_endpoint = 4;
}

message Egress {
    // The port associated with the listener. If using Unix domain socket,
    // use 0 as the port number, with a valid protocol. The port if
    // specified, will be used as the default destination port associated
    // with the imported hosts. If the port is omitted, Istio will infer the
    // listener ports based on the imported hosts. Note that when multiple
    // egress listeners are specified, where one or more listeners have
    // specific ports while others have no port, the hosts exposed on a
    // listener port will be based on the listener with the most specific
    // port.
    Port port = 1;

    // The ip or the Unix domain socket to which the listener should be bound
    // to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
    // `unix:///path/to/uds` or `unix://@foobar` (Linux abstract namespace). If
    // omitted, Istio will automatically configure the defaults based on imported
    // services, the workload instances to which this configuration is applied to and
    // the captureMode. If captureMode is NONE, bind will default to
    // 127.0.0.1.
    string bind = 2;

    // When the bind address is an IP, the captureMode option dictates
    // how traffic to the listener is expected to be captured (or not).
    // captureMode must be DEFAULT or NONE for Unix domain socket binds.
    CaptureMode capture_mode = 3;

    // REQUIRED: One or more service hosts exposed by the listener.
    repeated HostSelector hosts = 4;

    // OZNOTE: Why do we need a selector? Host should be good enough here?
    // Is it for Access control, or for pruning of config?
    message HostSelector {
        // namespace from which the service is imported from.
        // can be '*', '.', '~' to indicate any, local or no namespace respectively.
        string namespace  = 1;

        // host name. Can be prefix (i.e. '*' or '*.foo.example.com'.
        string host = 2;
    }
}


// Telemetry configuration for a Workload.
message Telemetry {

}

// Security configuration for a Workload.
message Security {
}


// CaptureMode describes how traffic to a listener is expected to be
// captured. Applicable only when the listener is bound to an IP.
enum CaptureMode {
    // OZNOTE: This creates a defaulting mechanism
    // The default capture mode defined by the environment
    DEFAULT = 0;

    // Capture traffic using IPtables redirection
    IPTABLES = 1;

    // No traffic capture. When used in egress listener, the application is
    // expected to explicitly communicate with the listener port/unix
    // domain socket. When used in ingress listener, care needs to be taken
    // to ensure that the listener port is not in use by other processes on
    // the host.
    NONE = 2;
}
//
//Workload:
//workload selector
//Networking block
//ingress
//port
//bind
//captureMode
//defaultEndpoint
//egress
//port
//bind
//captureMode
//Security block
//ingress
//tls
//mtls
//jwt authenticators?
//egress
//tls
//mtls
//jwt token injection?
//Telemetry block
//tracing
//sampleRate
//tagHeaders
//serviceNameFormat
//logging
//monitoring
//
//Gateway:
//Similar structure to Workload, different semantic meaning.


